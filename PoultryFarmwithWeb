// Import Libraries
#include "DHT.h"
#include <ESP32_Servo.h>

#include <WiFi.h>
#include <SPI.h>

// Libraries to get time from NTP Server
#include <NTPClient.h>
#include <WiFiUdp.h>

// Replace with your network credentials
const char* ssid     = "CoE-C1";
const char* password = "publicwifi";

// Define NTP Client to get time
WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP);

// Variables to save date and time
String formattedDate;
String dayStamp;
String timeStamp;

//Import Libraries of GasSensor
 #include <MQ2.h>
 #define MQ2 16
 int sensorValue;
// boolean state = false;

//Libraries for OLED Display
#include <Wire.h>
#include <Adafruit_SSD1306.h>
#include <Adafruit_GFX.h>

//OLED pins
#define OLED_SDA 21
#define OLED_SCL 22 
#define OLED_RST -1
#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

//DHT11
#define DHTPIN 33
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);

int temp_led = 14;
int fan_led = 8;
int temp_lamp = 16;

//Sieuam 
//#define echopin 5
//#define trigpin 6
const int trigPin = 34;
const int echoPin = 35;
int duration;
int distance;

Servo myservo;
int servoPin = 18;

// Set web server port number to 80
WiFiServer server(80);

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RST);

// Variable to store the HTTP request
String header;

//Initialize OLED display
void startOLED(){
  //reset OLED display via software
  pinMode(OLED_RST, OUTPUT);
  digitalWrite(OLED_RST, LOW);
  delay(20);
  digitalWrite(OLED_RST, HIGH);
 
  //initialize OLED
  Wire.begin(OLED_SDA, OLED_SCL);
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3c, false, false)) { // Address 0x3C for 128x32
    Serial.println(F("SSD1306 allocation failed"));
    for(;;); // Don't proceed, loop forever
  }
  display.clearDisplay();
  display.setTextColor(WHITE);
  display.setTextSize(1);
  display.setCursor(0,0);
  display.print("Poultry Farm");
}

void setup() {
  Serial.begin(112500);

//  Serial.println("DHT11 sensor!");
  dht.begin();

  pinMode(temp_led,OUTPUT);
  pinMode(fan_led,OUTPUT);
  pinMode(temp_lamp,OUTPUT);

  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);
  
  myservo.attach(servoPin);
  
  pinMode(MQ2, INPUT);
   
// Connect to Wi-Fi network with SSID and password
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  // Print local IP address and start web server
  Serial.println("");
  Serial.println("WiFi connected.");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
//  display.setCursor(0,20);
//  display.print("Access web server at: ");
//  display.setCursor(0,30);
//  display.print(WiFi.localIP());
//  display.display();
  server.begin();

  // Initialize a NTPClient to get time
  timeClient.begin();
  // Set offset time in seconds to adjust for your timezone, for example:
  // GMT +1 = 3600
  // GMT +8 = 28800
  // GMT -1 = -3600
  // GMT 0 = 0
  timeClient.setTimeOffset(25200);

//  myservo.write(0);                         
//  delay(100);
}

void loop() {

  getTimeStamp();
  
  //gas sensor start
  sensorValue = digitalRead(MQ2);
//  Serial.print("Value Gas: ");
//  Serial.println(sensorValue);
  delay(500);
 if (sensorValue >1100)
 {
  display.begin(SSD1306_SWITCHCAPVCC, 0x3c);
  display.clearDisplay();
   
  // display a line of text
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(10,10);
  display.print("Switch on Exhaust fans");
  display.display();

//  Serial.println("Switch on Exhaust fans");
 } 
else
 {
  display.begin(SSD1306_SWITCHCAPVCC, 0x3c);
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(10,10);
  display.print("Switch off Exhaust fans");
  display.display();
  
//  Serial.println("Switch off Exhaust fans");
 }
  delay(100);
  //gas sensor end
  
  //dht11 start
  float t = dht.readTemperature();
//  Serial.print("Temperature: ");
//  Serial.print(t);
//  Serial.println("Â°C");
  delay(500);

if(t>35)
 {
  display.begin(SSD1306_SWITCHCAPVCC, 0x3c);
  display.clearDisplay();
   
  // display a line of text
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(10,10);
  display.print("Temperature is HIGH");
  display.display();
//  Serial.println("Temperature is HIGH");
  digitalWrite(temp_led,HIGH); //Red
  delay(200);  
  }
else if(t<25)
  {
  display.begin(SSD1306_SWITCHCAPVCC, 0x3c);
  display.clearDisplay();
  
  // display a line of text
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(10,10);
  display.print("Temperature is LOW");
  display.display();
//  Serial.println("Temperature is LOW");

  }
else
  {
  digitalWrite(temp_led,LOW);

  }


//Humidity

  float d = dht.readHumidity();
//  Serial.print("Humidity: ");
//  Serial.print(d);
//  Serial.println("%");
  delay(500);
 
 if(d>80)
 {
  display.begin(SSD1306_SWITCHCAPVCC, 0x3c);
  display.clearDisplay();
   
  // display a line of text
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(10,10);
  display.print("Humidity is HIGH");
  display.display();
//  Serial.println("Humidity is HIGH");
  digitalWrite(temp_lamp,HIGH); //Red
  delay(200);

  }
else if (d<40)
  {
  display.begin(SSD1306_SWITCHCAPVCC, 0x3c);
  display.clearDisplay();
  
  // display a line of text
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(10,10);
  display.print("Humidity is LOW");
  display.display();
//  Serial.println("Humidity is LOW");
  
  }
else
 {
  digitalWrite(temp_lamp,LOW); //Red
  delay(200);
  
 }
  //dht11 end
  
  //ultrasoinc start
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  duration = pulseIn(echoPin, HIGH);
  distance = duration * 0.034 / 2;
//  Serial.print("distance:  ");
//  Serial.print(distance);
//  Serial.println(" cm");
  delay(500);

if(distance<5)
 {
  display.begin(SSD1306_SWITCHCAPVCC, 0x3c);
  display.clearDisplay();
  
  // display a line of text
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(10,10);
  display.print("Fill up the water tanks");
  display.display();
//  Serial.println("Fill up the water tanks");
  delay(500);
  myservo.write(90);
  delay(2000);
  }
else if(distance>10)
  {
  display.begin(SSD1306_SWITCHCAPVCC, 0x3c);
  display.clearDisplay();
  
  // display a line of text
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(10,10);
  display.print("Water tank is full");
  display.display();
//  Serial.println("Water tank is full");
  delay(500);  
  myservo.write(0);                           
  delay(100);
  }
else
  {
  }
  //ultrasoinc end
  
  //servo start
//  myservo.write(90);
//  delay(2000);
//  myservo.write(0);                           
  //servo end
//  delay(100);

  WiFiClient client = server.available();   // Listen for incoming clients

  if (client) {                             // If a new client connects,
    Serial.println("New Client.");          // print a message out in the serial port
    String currentLine = "";                // make a String to hold incoming data from the client
    while (client.connected()) {            // loop while the client's connected
      if (client.available()) {             // if there's bytes to read from the client,
        char c = client.read();             // read a byte, then
        Serial.write(c);                    // print it out the serial monitor
        header += c;
        if (c == '\n') {                    // if the byte is a newline character
          // if the current line is blank, you got two newline characters in a row.
          // that's the end of the client HTTP request, so send a response:
          if (currentLine.length() == 0) {
            // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK)
            // and a content-type so the client knows what's coming, then a blank line:
            client.println("HTTP/1.1 200 OK");
            client.println("Content-type:text/html");
            client.println("Connection: close");
            client.println();
            
            // Display the HTML web page
            client.println("<!DOCTYPE html><html>");
            client.println("<head><meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">");
            client.println("<link rel=\"icon\" href=\"data:,\">");
            // CSS to style the table 
            client.println("<style>body { text-align: center; font-family: \"Trebuchet MS\", Arial;}");
            client.println("table { border-collapse: collapse; width:35%; margin-left:auto; margin-right:auto; }");
            client.println("th { padding: 12px; background-color: #0043af; color: white; }");
            client.println("tr { border: 1px solid #ddd; padding: 12px; }");
            client.println("tr:hover { background-color: #bcbcbc; }");
            client.println("td { border: none; padding: 12px; }");
            client.println(".sensor { color:white; font-weight: bold; background-color: #bcbcbc; padding: 1px; }");
            
            // Web Page Heading
            client.println("</style></head><body><h1>Poultry Farm IoT</h1>");
            client.println("<h3>Last update: " + timeStamp + "</h3>");
            client.println("<table><tr><th>MEASUREMENT</th><th>VALUE</th></tr>");
            client.println("<tr><td>Temperature</td><td><span class=\"sensor\">");
            client.println(t);
            client.println(" *C</span></td></tr>");  
            // Uncomment the next line to change to the *F symbol
            //client.println(" *F</span></td></tr>");  
            client.println("<tr><td>Humidity</td><td><span class=\"sensor\">");
            client.println(d);
            client.println("%</span></td></tr>"); 
            client.println("<tr><td>Ultrasoinc</td><td><span class=\"sensor\">");
            client.println(distance);
            client.println(" cm</span></td></tr>"); 
//            client.println("<p>LoRa RSSI: " + String(rssi) + "</p>");
            client.println("</body></html>");
            
            // The HTTP response ends with another blank line
            client.println();
            // Break out of the while loop
            break;
          } else { // if you got a newline, then clear currentLine
            currentLine = "";
          }
        } else if (c != '\r') {  // if you got anything else but a carriage return character,
          currentLine += c;      // add it to the end of the currentLine
        }
      }
    }
    // Clear the header variable
    header = "";
    // Close the connection
    client.stop();
    Serial.println("Client disconnected.");
    Serial.println("");
  }

}

// Function to get date and time from NTPClient
void getTimeStamp() {
  while(!timeClient.update()) {
    timeClient.forceUpdate();
  }
  // The formattedDate comes with the following format:
  // 2022-06-25T16:00:13Z
  // We need to extract date and time
  formattedDate = timeClient.getFormattedDate();
//  Serial.println(formattedDate);

  // Extract date
  int splitT = formattedDate.indexOf("2022-09-26");
  dayStamp = formattedDate.substring(0, splitT);
//  Serial.println(dayStamp);
  // Extract time
  timeStamp = formattedDate.substring(splitT+1, formattedDate.length()-1);
//  Serial.println(timeStamp);
}
